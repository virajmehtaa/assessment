#include <stdio.h>

void inputMatrix(int matrix[10][10], int row, int col, int matrixNumber) {
    printf("\n------------Matrix: %d------------\n", matrixNumber);
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            printf("Enter element [%d][%d] : ", i + 1, j + 1);
            scanf("%d", &matrix[i][j]);
        }
    }
  
    printf("\nMatrix %d is :\n", matrixNumber);
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}

void multiplyMatrices(int mat1[10][10], int mat2[10][10], int result[10][10], 
                      int r1, int c1, int r2, int c2) {
    
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            result[i][j] = 0;
        }
    }
  
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            for (int k = 0; k < c1; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }
}

void displayResult(int result[10][10], int r1, int c2) {
    printf("\n------------Result : Multiplication Matrix------------\n");
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            printf("%d\t", result[i][j]);
        }
        printf("\n");
    }
    printf("------------------------------------------------------\n");
}

int main() {
    int mat1[10][10], mat2[10][10], result[10][10];
    int r1, c1, r2, c2;

    printf("Matrix Multiplication Program\n");
  
    printf("Enter rows and columns for Matrix 1: ");
    scanf("%d %d", &r1, &c1);

    printf("Enter rows and columns for Matrix 2: ");
    scanf("%d %d", &r2, &c2);
  
    if (c1 != r2) {
        printf("\nError: Matrix multiplication not possible!\n");
        printf("Number of columns of Matrix 1 must equal number of rows of Matrix 2.\n");
        return 0;
    }
  
    inputMatrix(mat1, r1, c1, 1);
    inputMatrix(mat2, r2, c2, 2);
  
    multiplyMatrices(mat1, mat2, result, r1, c1, r2, c2);
  
    displayResult(result, r1, c2);

    return 0;
}
